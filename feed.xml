<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://chenuin.github.io/</id><title>一起唱 DoReMi</title><subtitle>Life is not divided into semesters. You don’t get summers off and very few employers are interested in helping you find yourself. Do that on your own time. --- Bill Gates</subtitle> <updated>2025-08-17T12:55:24+08:00</updated> <author> <name>chenuin</name> <uri>https://chenuin.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://chenuin.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-TW" href="https://chenuin.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 chenuin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[Vue.js] SVG 引入與 Typescript 型別設定</title><link href="https://chenuin.github.io/posts/vue-svg-import/" rel="alternate" type="text/html" title="[Vue.js] SVG 引入與 Typescript 型別設定" /><published>2025-08-14T16:00:00+08:00</published> <updated>2025-08-14T16:00:00+08:00</updated> <id>https://chenuin.github.io/posts/vue-svg-import/</id> <content type="text/html" src="https://chenuin.github.io/posts/vue-svg-import/" /> <author> <name>chenuin</name> </author> <category term="Vue.js" /> <category term="Vue" /> <category term="Vite" /> <summary>❌錯誤示範 如何在vue專案裡使用 svg 檔案，最直覺的做法： &amp;lt;template&amp;gt; &amp;lt;svg&amp;gt; &amp;lt;use href="./assets/penguin-svgrepo-com.svg" width="50%" height="50%" /&amp;gt; &amp;lt;/svg&amp;gt; &amp;lt;/template&amp;gt; 開發階段只要注意路徑正確，就能正常顯示。 但編譯到正式環境時，這段 &amp;lt;use&amp;gt; 標籤使用了 href="data:image/svg+xml,... 來嵌入 SVG 圖片，但這種用法在 &amp;lt;use&amp;gt; 上是無效的，因此圖示不會正確顯示。 改用圖片 &amp;lt;img&amp;gt; 來處理或許可以解決： &amp;lt;img src="data:image/svg+xml,&amp;lt;svg ...&amp;gt;...</summary> </entry> <entry><title>[React] JSX 常見語法雷區</title><link href="https://chenuin.github.io/posts/react-jsx-common-mistakes/" rel="alternate" type="text/html" title="[React] JSX 常見語法雷區" /><published>2025-07-27T16:00:00+08:00</published> <updated>2025-07-27T16:00:00+08:00</updated> <id>https://chenuin.github.io/posts/react-jsx-common-mistakes/</id> <content type="text/html" src="https://chenuin.github.io/posts/react-jsx-common-mistakes/" /> <author> <name>chenuin</name> </author> <category term="React" /> <category term="JSX" /> <summary>1. JSX 中 HTML 標籤必須自閉合 HTML 中 input 是 void element，本來不需要閉合標籤。 // ✅ 正確 &amp;lt;input type="text" /&amp;gt; // ❌ 錯誤 &amp;lt;input type="text"&amp;gt; // JSX 會報錯 2. class 要改寫成 className JSX 是 JavaScript，不允許使用 JS 關鍵字 class。 // ✅ 正確 &amp;lt;div className="box" /&amp;gt; // ❌ 錯誤 &amp;lt;div class="box" /&amp;gt; // React 不認得 3. for 要改寫成 htmlFor 表單 label 的 for 在 JSX 中是保留字，要改成 htmlFor： &amp;lt;label htmlFor="email"&amp;gt;Email&amp;lt;/la...</summary> </entry> <entry><title>Vue3.2 &amp;lt;script setup&amp;gt; 實作 TodoMVC</title><link href="https://chenuin.github.io/posts/vue3-script-setup/" rel="alternate" type="text/html" title="Vue3.2 &amp;amp;lt;script setup&amp;amp;gt; 實作 TodoMVC" /><published>2022-07-25T16:00:00+08:00</published> <updated>2022-07-25T16:00:00+08:00</updated> <id>https://chenuin.github.io/posts/vue3-script-setup/</id> <content type="text/html" src="https://chenuin.github.io/posts/vue3-script-setup/" /> <author> <name>chenuin</name> </author> <category term="Vue.js" /> <category term="Vue" /> <summary>Vue3.2開始將 &amp;lt;script setup&amp;gt; 移除experimental status，和setup()區別在有許多 option API 有了替代方案，props, emit 也可以寫在 setup，variable 或 function 也不需要透過 return 才能讓 &amp;lt;template&amp;gt; 使用，哇！寫法怎麼好像有點既是感呢 下面會利用 TodoMVC 的練習，比較與統整 &amp;lt;script setup&amp;gt; 和 setup() 常用的方法的差異。 TodoMVC 完整程式碼上傳至 Github (連結)。 data setup() &amp;lt;script&amp;gt; import { ref } from 'vue'; export default { setup() { const newTodo = r...</summary> </entry> <entry><title>mocha + webpack 的 Vue3 元件單元測試</title><link href="https://chenuin.github.io/posts/vue3-unit-test-by-mocha-webpack/" rel="alternate" type="text/html" title="mocha + webpack 的 Vue3 元件單元測試" /><published>2022-07-24T16:00:00+08:00</published> <updated>2022-07-24T16:00:00+08:00</updated> <id>https://chenuin.github.io/posts/vue3-unit-test-by-mocha-webpack/</id> <content type="text/html" src="https://chenuin.github.io/posts/vue3-unit-test-by-mocha-webpack/" /> <author> <name>chenuin</name> </author> <category term="Unit Test" /> <category term="Mocha" /> <category term="Vue" /> <summary>先說結論，我認為不適合用 mocha 進行 vue3 單元測試(@vue/test-utils)，反覆查了很久的資料，相關的套件支援度不足等有重重的障礙，根據 @vue/test-utils 目前提供的測試範例，選擇 Vitest 會更適合。 完整程式碼上傳至 Github (連結)。 一、安裝 首先，第一個問題就是 vue 的版本不能太新，目前只支援 3.0.7，因此對應安裝了相同版本的 @vue/server-renderer npm install --save-dev @vue/server-renderer@3.0.7 再來請安裝 webpck 和 mocha，mochapack，mochapack 是用來讀取 webpack 設定將元件 render 出來的套件，可支援 webpack5 和 mocha 9 npm install --save-dev w...</summary> </entry> <entry><title>Github Action 自動部署 github-pages</title><link href="https://chenuin.github.io/posts/auto-deploy-github-pages/" rel="alternate" type="text/html" title="Github Action 自動部署 github-pages" /><published>2022-06-28T16:00:00+08:00</published> <updated>2022-06-28T16:00:00+08:00</updated> <id>https://chenuin.github.io/posts/auto-deploy-github-pages/</id> <content type="text/html" src="https://chenuin.github.io/posts/auto-deploy-github-pages/" /> <author> <name>chenuin</name> </author> <category term="CI/CD" /> <category term="Github Action" /> <summary>Github pages 適合展示靜態頁面，只要在 github 建立 gh-pages 分支，可依據用戶名稱和repo名稱來開啟頁面。 https://[USER_NAME].github.io/[REPO_NAME]/ 以這個專案為例 https://github.com/chenuin/JavaScript30 路徑會是 https://chenuin.github.io/JavaScript30/ 使用 JamesIves/github-pages-deploy-action@v4.3.3 有兩個必填參數： branch: 分支 folder: 目錄，.代表整個repo根目錄 參數詳細說明請參考這裡，在 repo 裡新增 github action (連結): name: Github pages on: # Triggers t...</summary> </entry> </feed>
